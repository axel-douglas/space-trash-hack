# --- path guard para Streamlit Cloud ---
import sys, pathlib
ROOT = pathlib.Path(__file__).resolve().parents[1]  # carpeta ra√≠z del repo
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))
# ---------------------------------------

import streamlit as st
import pandas as pd
from app.modules.io import load_waste_df, save_waste_df

# ‚ö†Ô∏è Debe ser la PRIMERA llamada de Streamlit en la p√°gina
st.set_page_config(page_title="Inventario", page_icon="üß±", layout="wide")

st.title("1) Inventario de residuos")
st.caption("Este inventario refleja los √≠tems no-metab√≥licos que NASA identifica como problem√°ticos: empaques multicapa, espumas t√©cnicas (ZOTEK F30), bolsas EVA/CTB, textiles/wipes t√©cnicos y guantes de nitrilo.")

with st.expander("¬øPor qu√© estos √≠tems? (resumen r√°pido)", expanded=True):
    st.markdown("""
- **Pouches PE‚ÄìPET‚ÄìAl** (multicapa t√©rmico) ‚Üí dif√≠ciles de reciclar por capas incompatibles.
- **Espumas ZOTEK F30 (PE reticulado)** ‚Üí celdas cerradas, baja densidad, voluminosas.
- **EVA/CTB (Nomex/Nylon/Polyester)** ‚Üí textiles t√©cnicos con recubrimientos.
- **Guantes de nitrilo** ‚Üí elast√≥meros con aditivos.
- **Estructuras de Al** ‚Üí muy valiosas para **reuso** o como refuerzo en compuestos.
- **Regolito MGS-1** se usa como **carga mineral** en procesos de sinterizado/compuesto.
""")

# --- Carga y normalizaci√≥n ligera para edici√≥n amigable ---
df_raw = load_waste_df().copy()

# Aseguramos nombres amigables para edici√≥n sin romper downstream
df = df_raw.rename(columns={
    "id": "id",
    "category": "category",
    "material_family": "material_family",
    "mass_kg": "mass_kg",
    "volume_l": "volume_l",
    "flags": "flags",
})
# Derivados √∫tiles para otras p√°ginas (sin cambiar nombres originales)
df["_problematic"] = False

def _is_problematic(row: pd.Series) -> bool:
    cat = str(row.get("category", "")).lower()
    fam = str(row.get("material_family", "")).lower()
    flg = str(row.get("flags", "")).lower()
    # Heur√≠stica NASA: multicapa, foam t√©cnico, EVA/CTB, nitrilo, wipes t√©cnicos
    rules = [
        "pouches" in cat or "multilayer" in flg or "pe-pet-al" in fam,
        "foam" in cat or "zotek" in fam or "closed_cell" in flg,
        "eva" in cat or "ctb" in flg or "nomex" in fam or "nylon" in fam or "polyester" in fam,
        "glove" in cat or "nitrile" in fam,
        "wipe" in flg or "textile" in cat
    ]
    return any(rules)

df["_problematic"] = df.apply(_is_problematic, axis=1)

# M√©tricas r√°pidas para ‚Äúsabor laboratorio‚Äù
c1,c2,c3,c4 = st.columns(4)
c1.metric("√çtems", len(df))
c2.metric("Masa total (kg)", f"{df['mass_kg'].sum():.2f}")
c3.metric("Volumen (L)", f"{df['volume_l'].sum():.1f}")
c4.metric("Problem√°ticos", int(df["_problematic"].sum()))

st.markdown("### Editar inventario")
st.caption("Tip: los **problem√°ticos** se resaltan en la vista previa. Pod√©s ajustar `flags`/`category` para reflejar mejor la realidad de tu lote.")

edited = st.data_editor(
    df[["id","category","material_family","mass_kg","volume_l","flags"]],
    num_rows="dynamic",
    use_container_width=True,
    key="inv_editor",
)

colA, colB = st.columns([1,1])
with colA:
    if st.button("üíæ Guardar inventario", type="primary"):
        # Persistimos SOLO columnas originales esperadas por el pipeline
        save_waste_df(edited)
        st.success("Inventario guardado.")

with colB:
    if st.button("‚Ü∫ Recalcular 'problem√°ticos' para vista previa"):
        st.experimental_rerun()

st.markdown("---")
st.subheader("Vista previa con resaltado de 'problem√°ticos'")

# Re-generamos 'problematic' sobre la versi√≥n editada para la vista previa:
prev = edited.copy()
prev["_problematic"] = prev.apply(_is_problematic, axis=1)

def _row_style(s: pd.Series):
    return ['background-color: #FFF3CD' if s["_problematic"] else '' for _ in s]

styled = prev.style.apply(_row_style, axis=1).hide(axis="columns", subset=["_problematic"])
st.dataframe(styled, use_container_width=True)

st.info("**Siguiente paso** ‚Üí Abr√≠ **2) Objetivo** para definir el target. El generador priorizar√° consumir √≠tems 'problem√°ticos' y propondr√° procesos que pueden mezclar **regolito MGS-1** (p.ej., *Sinter with MGS-1*).")
