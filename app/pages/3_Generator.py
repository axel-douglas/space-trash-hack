# --- path guard para Streamlit Cloud ---
import sys, pathlib
ROOT = pathlib.Path(__file__).resolve().parents[1]  # carpeta ra√≠z del repo
if str(ROOT) not in sys.path:
    sys.path.insert(0, str(ROOT))
# ---------------------------------------

import streamlit as st
import pandas as pd
from app.modules.ui_blocks import inject_css, pill, section, card
from app.modules.io import load_waste_df, load_process_df
from app.modules.process_planner import choose_process
from app.modules.generator import generate_candidates
from app.modules.safety import check_safety, safety_badge

# 1) st.set_page_config DEBE ir primero
st.set_page_config(page_title="Generador", page_icon="‚öôÔ∏è", layout="wide")

# 2) Inyectamos CSS global (incluye tipograf√≠as y peque√±os estilos de cards/pills)
inject_css()

# ------ CSS local (aspecto ‚Äúmission console‚Äù) ------
st.markdown("""
<style>
/* Hero barra */
.hero {
  padding: 18px 20px;
  border-radius: 16px;
  background: radial-gradient(1200px 600px at 15% -10%, rgba(0,200,255,0.12), transparent),
              linear-gradient(135deg, rgba(255,255,255,0.06), rgba(255,255,255,0.02));
  border: 1px solid rgba(255,255,255,0.08);
  backdrop-filter: blur(6px);
}
.hero h1 {margin:0; font-size: 1.6rem;}
.hero .sub {opacity:.8; font-size:.95rem; margin-top:6px;}

.console {
  border: 1px dashed rgba(255,255,255,0.15);
  border-radius: 14px; padding: 14px;
  margin: 6px 0 18px 0;
}

/* KPI chips */
.kpi {
  display:flex; gap:10px; align-items:center;
  padding:10px 12px; border-radius:12px;
  border:1px solid rgba(255,255,255,0.1);
  background: rgba(255,255,255,0.03);
}
.kpi .v {font-weight:700; font-variant-numeric: tabular-nums;}
.kpi .t {opacity:.7; font-size:.9rem;}

.legend {
  display:flex; gap:8px; flex-wrap:wrap; margin: 4px 0 0 0;
}
.legend span {
  font-size:.78rem; padding:4px 8px; border-radius:999px;
  border:1px solid rgba(255,255,255,0.1); opacity:.9;
}
.badge {
  display:inline-flex; align-items:center; gap:6px;
  padding:6px 10px; border-radius:999px;
  background: rgba(255,255,255,0.05);
  border: 1px solid rgba(255,255,255,0.08);
  font-size:.85rem; margin-right:6px; margin-bottom:4px;
}
.hr-micro {height:1px; background:linear-gradient(90deg, transparent, rgba(255,255,255,0.15), transparent); margin:10px 0;}
.small {font-size:.9rem; opacity:.85;}
.hint {opacity:.9; font-size:.92rem;}
.note {
  border-left: 3px solid #1f9d55; padding: 8px 12px; background: rgba(31,157,85,0.1);
  border-radius: 6px; margin: 8px 0;
}
.warn {
  border-left: 3px solid #d9534f; padding: 8px 12px; background: rgba(217,83,79,0.08);
  border-radius: 6px; margin: 8px 0;
}
.rec {
  border-left: 3px solid #37a1f2; padding: 8px 12px; background: rgba(55,161,242,0.08);
  border-radius: 6px; margin: 8px 0;
}
</style>
""", unsafe_allow_html=True)

# -------------------- Encabezado ‚ÄúMission Console‚Äù --------------------
st.markdown("""
<div class="hero">
  <h1>‚öôÔ∏è Generador ‚Ä¢ Mission Console</h1>
  <div class="sub">Ac√° mezclamos <b>basura inorg√°nica</b> con <b>procesos del h√°bitat</b> para proponer recetas
  que maximizan utilidad (rigidez/estanqueidad), minimizan recursos (agua/energ√≠a/tiempo de tripulaci√≥n) y,
  cuando corresponde, aprovechan <b>regolito MGS-1</b> (ISRU).</div>
</div>
""", unsafe_allow_html=True)

# -------------------- Precondici√≥n: target definido --------------------
target = st.session_state.get("target", None)
if not target:
    st.warning("Defin√≠ primero el objetivo en **2) Target Designer**.")
    st.stop()

# -------------------- Estado r√°pido del inventario y procesos --------------------
waste_df = load_waste_df()
proc_df  = load_process_df()
proc_filtered = choose_process(
    target["name"], proc_df,
    scenario=target.get("scenario"),
    crew_time_low=target.get("crew_time_low", False)
)
if proc_filtered is None or proc_filtered.empty:
    proc_filtered = proc_df.copy()

# KPI bar
total_items = len(waste_df) if waste_df is not None else 0
mass_col = "mass_kg" if "mass_kg" in waste_df.columns else ("kg" if "kg" in waste_df.columns else None)
total_mass = float(waste_df[mass_col].sum()) if (total_items>0 and mass_col) else 0.0

# estimaci√≥n de ‚Äúproblem√°ticos‚Äù con reglas (en vivo, sin mutar el DF)
def _is_problematic_row_view(row: pd.Series) -> bool:
    cat = str(row.get("category", "")).lower()
    fam = str(row.get("material_family", "")).lower()
    flg = str(row.get("flags", "")).lower()
    rules = [
        "pouches" in cat or "multilayer" in flg or "pe-pet-al" in fam,
        "foam" in cat or "zotek" in fam or "closed_cell" in flg,
        "eva" in cat or "ctb" in flg or "nomex" in fam or "nylon" in fam or "polyester" in fam,
        "glove" in cat or "nitrile" in fam,
        "wipe" in flg or "textile" in cat,
    ]
    return any(rules)

prob_count = 0
if total_items:
    try:
        prob_count = int(waste_df.apply(_is_problematic_row_view, axis=1).sum())
    except Exception:
        prob_count = 0

c1,c2,c3,c4 = st.columns([1.2,1.2,1.2,1.2])
with c1:
    st.markdown(f"""<div class="kpi">üß± <div><div class="v">{total_items}</div><div class="t">√≠tems en inventario</div></div></div>""", unsafe_allow_html=True)
with c2:
    st.markdown(f"""<div class="kpi">‚öñÔ∏è <div><div class="v">{total_mass:.2f} kg</div><div class="t">masa total</div></div></div>""", unsafe_allow_html=True)
with c3:
    st.markdown(f"""<div class="kpi">‚ö†Ô∏è <div><div class="v">{prob_count}</div><div class="t">problem√°ticos detectados</div></div></div>""", unsafe_allow_html=True)
with c4:
    st.markdown(f"""<div class="kpi">üß™ <div><div class="v">{len(proc_filtered)}</div><div class="t">procesos habilitados</div></div></div>""", unsafe_allow_html=True)

# Leyenda r√°pida de c√≥mo punt√∫a el generador
st.markdown("""
<div class="legend">
  <span>üéØ Se ajusta al objetivo (rigidez/estanqueidad)</span>
  <span>üíß/‚ö°Ô∏è/üë©‚ÄçüöÄ Penaliza agua/energ√≠a/tiempo</span>
  <span>‚õ∞Ô∏è ISRU con MGS-1 cuando aplica</span>
  <span>‚ôªÔ∏è Bono por ‚Äúbasura problem√°tica‚Äù valorizada</span>
</div>
""", unsafe_allow_html=True)

st.markdown('<div class="hr-micro"></div>', unsafe_allow_html=True)

# -------------------- Panel de control --------------------
left, right = st.columns([1.2, 1.1])
with left:
    section("Control del generador", "Eleg√≠ cu√°ntas opciones quer√©s probar.")
    n = st.slider("N√∫mero de candidatos a generar", 3, 12, 6)
    opt_evals = st.slider(
        "Evaluaciones del optimizador (BO/MILP)",
        0, 80, 24,
        help="Cantidad de iteraciones adicionales para refinar el frente Pareto."
    )

with right:
    section("Tips de uso", "Para quienes no son expertos:")
    st.markdown("""
- **‚ÄúGenerar opciones‚Äù**: el sistema mezcla residuos reales del inventario con procesos disponibles y propone recetas.
- **¬øQu√© es ‚ÄúISRU‚Äù?** Uso de recursos in situ (en Marte) ‚Üí agregamos **MGS-1** cuando el proceso lo permite.
- **¬øC√≥mo punt√∫a?** Suma por encaje con el objetivo, resta por consumir m√°s de lo permitido (agua/energ√≠a/tiempo), y **bonifica** si usamos basura dif√≠cil.
""")

# CTA principal
if st.button("üöÄ Generar opciones", type="primary", use_container_width=True):
    result = generate_candidates(
        waste_df, proc_filtered, target, n=n,
        crew_time_low=target.get("crew_time_low", False),
        optimizer_evals=opt_evals
    )
    if isinstance(result, tuple):
        cands, history = result
    else:
        cands, history = result, pd.DataFrame()
    st.session_state["candidates"] = cands
    st.session_state["optimizer_history"] = history

st.markdown('<div class="hr-micro"></div>', unsafe_allow_html=True)

# -------------------- Si no hay candidatos a√∫n --------------------
cands = st.session_state.get("candidates", [])
history_df = st.session_state.get("optimizer_history", pd.DataFrame())
if not cands:
    st.info("Todav√≠a no hay candidatos. Configur√° el n√∫mero y presion√° **Generar opciones**. "
            "Recomendaci√≥n: asegurate de que tu inventario tenga pouches, espumas, EVA/CTB, textiles o nitrilo; "
            "y que el cat√°logo incluya P02/P03/P04.")
    with st.expander("¬øQu√© hace el generador (en criollo)?", expanded=False):
        st.markdown("""
- **Mira tus residuos** (con foco en los problem√°ticos de NASA).
- **Elige un proceso** coherente (laminar, sinter con regolito, reconfigurar CTB, etc.).
- **Predice** propiedades y recursos de la receta.
- **Punt√∫a** balanceando objetivos y costos.
- **Muestra trazabilidad** para que se vea qu√© basura se valoriz√≥.
""")
    st.stop()

# -------------------- Render de candidatos con UX explicativa --------------------
def _res_bar(current: float, limit: float) -> float:
    if limit is None or float(limit) <= 0:
        return 0.0
    return max(0.0, min(1.0, current/float(limit)))

if isinstance(history_df, pd.DataFrame) and not history_df.empty:
    st.subheader("Convergencia del optimizador")
    st.caption("Seguimiento r√°pido de hipervolumen y porcentaje de soluciones dominadas.")
    valid_hist = history_df.dropna(subset=["hypervolume"])
    if not valid_hist.empty:
        last = valid_hist.iloc[-1]
        m1, m2, m3 = st.columns([1, 1, 1])
        m1.metric("Hipervolumen", f"{last['hypervolume']:.3f}")
        m2.metric("Dominancia", f"{last['dominance_ratio']*100:.1f}%")
        m3.metric("Tama√±o Pareto", f"{int(last['pareto_size'])}")
        chart_data = valid_hist.set_index("iteration")["hypervolume"].to_frame()
        chart_data["dominancia"] = valid_hist.set_index("iteration")["dominance_ratio"]
        st.line_chart(chart_data)

st.subheader("Resultados del generador")
st.caption("Cada ‚ÄòOpci√≥n‚Äô es una combinaci√≥n concreta de residuos + proceso, con predicci√≥n de propiedades y consumo de recursos. "
           "Us√° los expanders para ver detalles y trazabilidad NASA.")

for i, c in enumerate(cands):
    p = c["props"]
    header = f"Opci√≥n {i+1} ‚Äî Score {c['score']} ‚Äî Proceso {c['process_id']} {c['process_name']}"
    with st.expander(header, expanded=(i == 0)):
        # L√≠nea de badges
        badges = []
        if c.get("regolith_pct", 0) > 0:
            badges.append("‚õ∞Ô∏è ISRU: +MGS-1")
        # Heur√≠stica ‚Äúproblem√°tico presente‚Äù
        src_cats = " ".join(map(str, c.get("source_categories", []))).lower()
        src_flags = " ".join(map(str, c.get("source_flags", []))).lower()
        problem_present = any([
            "pouches" in src_cats, "multilayer" in src_flags,
            "foam" in src_cats, "ctb" in src_flags, "eva" in src_cats,
            "nitrile" in src_cats, "wipe" in src_flags
        ])
        if problem_present:
            badges.append("‚ôªÔ∏è Valorizaci√≥n de problem√°ticos")
        if badges:
            st.markdown(" ".join([f'<span class="badge">{b}</span>' for b in badges]), unsafe_allow_html=True)

        # Resumen t√©cnico
        colA, colB = st.columns([1.1, 1])
        with colA:
            st.markdown("**üß™ Materiales**")
            st.write(", ".join(c["materials"]))
            st.markdown("**‚öñÔ∏è Pesos en mezcla**")
            st.write(c["weights"])

            st.markdown("**üî¨ Predicci√≥n (demo)**")
            colA1, colA2, colA3 = st.columns(3)
            colA1.metric("Rigidez", f"{p.rigidity:.2f}")
            colA2.metric("Estanqueidad", f"{p.tightness:.2f}")
            colA3.metric("Masa final", f"{p.mass_final_kg:.2f} kg")

        with colB:
            st.markdown("**üîß Proceso**")
            st.write(f"{c['process_id']} ‚Äî {c['process_name']}")
            st.markdown("**üìâ Recursos estimados**")
            colB1, colB2, colB3 = st.columns([1,1,1])
            colB1.write("Energ√≠a (kWh)")
            colB1.progress(_res_bar(p.energy_kwh, target["max_energy_kwh"]))
            colB1.caption(f"{p.energy_kwh:.2f} / {target['max_energy_kwh']}")

            colB2.write("Agua (L)")
            colB2.progress(_res_bar(p.water_l, target["max_water_l"]))
            colB2.caption(f"{p.water_l:.2f} / {target['max_water_l']}")

            colB3.write("Crew (min)")
            colB3.progress(_res_bar(p.crew_min, target["max_crew_min"]))
            colB3.caption(f"{p.crew_min:.0f} / {target['max_crew_min']}")

        st.markdown('<div class="hr-micro"></div>', unsafe_allow_html=True)

        # Trazabilidad NASA
        st.markdown("**üõ∞Ô∏è Trazabilidad NASA**")
        st.write("IDs usados:", ", ".join(c.get("source_ids", [])) or "‚Äî")
        st.write("Categor√≠as:", ", ".join(map(str, c.get("source_categories", []))) or "‚Äî")
        st.write("Flags:", ", ".join(map(str, c.get("source_flags", []))) or "‚Äî")
        if c.get("regolith_pct", 0) > 0:
            st.write(f"**MGS-1 agregado:** {c['regolith_pct']*100:.0f}%")

        # Seguridad (badges)
        st.markdown("**üõ°Ô∏è Seguridad**")
        flags = check_safety(c["materials"], c["process_name"], c["process_id"])
        badge = safety_badge(flags)
        if badge["level"] == "Riesgo":
            pill("Riesgo", "risk"); st.warning(badge["detail"])
        else:
            pill("OK", "ok"); st.success(badge["detail"])

        # Bot√≥n de selecci√≥n
        if st.button(f"‚úÖ Seleccionar Opci√≥n {i+1}", key=f"pick_{i}"):
            st.session_state["selected"] = {"data": c, "safety": badge}
            st.success("Opci√≥n seleccionada. Abr√≠ **4) Resultados**, **5) Comparar & Explicar** o **6) Pareto & Export**.")

        # Explicaci√≥n en criollo (mini narrativa) ‚Äî evitar anidar expanders
pop = st.popover("üß† ¬øPor qu√© esta receta pinta bien? (explicaci√≥n en criollo)")
with pop:
    bullets = []
    bullets.append("‚Ä¢ Sumamos puntos si **rigidez/estanqueidad** se acercan a lo que pediste.")
    bullets.append("‚Ä¢ Restamos si se pasa en **agua/energ√≠a/tiempo** de la tripulaci√≥n.")
    if problem_present:
        bullets.append("‚Ä¢ Bonus porque esta opci√≥n **se come basura problem√°tica** (¬°la que m√°s molesta en la base!).")
    if c.get('regolith_pct', 0) > 0:
        bullets.append("‚Ä¢ Usa **MGS-1** (regolito) como carga mineral ‚Üí eso es ISRU puro: menos dependencia de la Tierra.")
    st.markdown("\n".join(bullets))


# -------------------- Pie de gu√≠a / glosario --------------------
st.markdown('<div class="hr-micro"></div>', unsafe_allow_html=True)
with st.expander("üìö Glosario ultra r√°pido", expanded=False):
    st.markdown("""
- **ISRU**: *In-Situ Resource Utilization*. Usar recursos del lugar (en Marte, el **regolito** MGS-1).
- **P02 ‚Äì Press & Heat Lamination**: ‚Äúplancha‚Äù y ‚Äúfusiona‚Äù multicapa para dar forma.
- **P03 ‚Äì Sinter with MGS-1**: mezcla con regolito y sinteriza ‚Üí piezas r√≠gidas, √∫tiles para interiores.
- **P04 ‚Äì CTB Reconfig**: reusar/transformar bolsas EVA/CTB con herrajes.
- **Score**: cu√°nto ‚Äúcierra‚Äù la opci√≥n seg√∫n tu objetivo y l√≠mites de recursos/tiempo.
""")
st.info("Sugerencia: gener√° varias opciones y pas√° a **4) Resultados**, **5) Comparar** y **6) Pareto & Export** para cerrar tu plan.")
